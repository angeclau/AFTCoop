% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.coop.R
\name{cv.coop}
\alias{cv.coop}
\title{K-fold Cross-validation for Cooperative AFT Model Estimation}
\usage{
cv.coop(
  X,
  Xtilde,
  Y,
  delta,
  sigma = NULL,
  lambda = NULL,
  rho = NULL,
  nfolds = 5,
  model,
  parallel = TRUE,
  ncore_max = 5,
  seed = 123
)
}
\arguments{
\item{X}{Matrix of combined covariates of dimension \code{n x p_u+p_z} obtained as \code{X=[U,Z]}, when two views are provided (case=="coop"). Otherwise \code{X=[U]} or  \code{X=[Z]}, when case=="onlyU" or  case=="onlyZ", respectively.}

\item{Xtilde}{Matrix of cooperative adjusted covariates for cooperative estimation of dimension \code{n x p_u+p_z} obtained as \code{Xtilde=[U,-Z]}, when two views are provided (case=="coop");}

\item{Y}{Vector of log observed survival times or log censored times (response variable in log scale) of dimension \code{n}.}

\item{delta}{Vector of censoring indicators (1 for event, 0 for censored) of dimension \code{n}.}

\item{sigma}{Scale parameter for the AFT model.}

\item{lambda}{Vector of regularization parameters in descending order.}

\item{rho}{scalar cooperation parameter or vector of cooperation parameters, the latter option works when case=="coop".}

\item{nfolds}{Number of cross-validation folds (default: 5)}

\item{model}{Character string specifying the AFT model type. The following choices are available: "weibull";"lognormal";"loglogistic".}

\item{parallel}{Logical; whether to use parallel processing (default: TRUE)}

\item{ncore_max}{Maximum number of cores for parallel processing (default: 5)}

\item{seed}{Random seed for reproducibility (default: 123)}
}
\value{
A list of class "cv.coop" containing:
\itemize{
\item cv.err.linPred: Vector of cross-validation errors for each lambda
\item cv.err.obj: Matrix of fold-specific errors (rows are folds, columns are lambdas)
\item lambda_grid:  vector of values used in the grid of lambda for the cross validation
\item lambda.min: Value of lambda that minimizes cross-validation error
\item ind.lambda.min: Index of lambda.min in the lambda vector
\item lambda.1se: Largest lambda within one standard error of minimum
\item ind.lambda.1se: Index of lambda.1se in the lambda vector
\item case.rho: chosed value of parameter rho
}
}
\description{
Function cv.coop performs k-fold cross-validation for cooperative estimation in Accelerated Failure Time
(AFT) models. This function helps selecting the optimal tuning parameters (lambda) by
minimizing prediction error across folds. It is typically used by function \code{\link{aft_coop}} to select the optimal parameter.
}
\details{
The function implements k-fold cross-validation by:
\itemize{
\item Randomly partitioning the data into k folds
\item For each fold:
\itemize{
\item Fitting the model on training data (excluding the fold)
\item Computing predictions on validation data (the fold)
\item Calculating prediction error
}
\item Computing both minimum error lambda (lambda.min) and 1-standard-error rule
lambda (lambda.1se)
}

The function requires the cvTools package for fold generation.
The number of cores used for parallel processing is automatically determined
based on system availability, number of folds and user-specified maximum.
Parallel processing implementation differs between Windows (using makeCluster)
and Unix-like systems (using mclapply).
}
\note{
Last change 25/03/2025
}
\seealso{
\code{\link{aft_coop}} for the main estimation function
}
